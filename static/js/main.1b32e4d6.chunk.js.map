{"version":3,"sources":["components/Movie.js","routes/Home.js","routes/Detail.js","App.js","index.js"],"names":["Movie","_ref","id","medium_cover_image","title","rating","genres","summary","React","createElement","src","alt","Link","to","concat","map","g","index","key","prototypes","PropTypes","number","isRequired","string","arrayOf","Home","loading","setLoading","useState","movies","setMovies","useEffect","async","json","fetch","data","getMovies","movie","Detail","useParams","detail","setDetail","status","console","log","getMovie","keys","Object","language","App","Router","basename","process","Routes","Route","path","element","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"kKAIA,SAASA,EAAKC,GAA6D,IAA5DC,GAAEA,EAAEC,mBAAEA,EAAkBC,MAAEA,EAAKC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASN,EACvE,OACEO,IAAAC,cAAA,WACED,IAAAC,cAAA,OAAKC,IAAKP,EAAoBQ,IAAKP,IACnCI,IAAAC,cAAA,UACED,IAAAC,cAACG,IAAI,CAACC,GAAE,UAAAC,OAAYZ,IACjBE,EAAM,WAASC,IAGpBG,IAAAC,cAAA,SAAIF,GACJC,IAAAC,cAAA,WAAK,WAEHD,IAAAC,cAAA,UACGH,EAAOS,IAAI,CAACC,EAAGC,IACdT,IAAAC,cAAA,MAAIS,IAAG,GAAAJ,OAAKE,EAAC,OAAAF,OAAMG,IAAUD,MAInCR,IAAAC,cAAA,YAKNT,EAAMmB,WAAa,CACjBjB,GAAIkB,IAAUC,OAAOC,WACrBnB,mBAAoBiB,IAAUG,OAAOD,WACrClB,MAAOgB,IAAUG,OAAOD,WACxBjB,OAAQe,IAAUG,OAAOD,WACzBf,QAASa,IAAUG,OAAOD,WAC1BhB,OAAQc,IAAUI,QAAQJ,IAAUG,QAAQD,YAG/BtB,QCUAyB,MA1Cf,WACE,MAAOC,EAASC,GAAcC,oBAAS,IAChCC,EAAQC,GAAaF,mBAAS,IAgBrC,OAJAG,oBAAU,KAXQC,WAChB,MAAMC,cACEC,MACJ,2EAEFD,OAEFH,EAAUG,EAAKE,KAAKN,QACpBF,GAAW,IAIXS,IACC,IAGD5B,IAAAC,cAAA,WACGiB,EACClB,IAAAC,cAAA,UAAI,eAEJD,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,eACHoB,EAAOd,IAAKsB,GACX7B,IAAAC,cAACT,EAAK,CACJkB,IAAKmB,EAAMnC,GACXA,GAAImC,EAAMnC,GACVC,mBAAoBkC,EAAMlC,mBAC1BC,MAAOiC,EAAMjC,MACbC,OAAQgC,EAAMhC,OACdC,OAAQ+B,EAAM/B,OACdC,QAAS8B,EAAM9B,cCNd+B,MA5Bf,WACE,MAAMpC,GAAEA,GAAOqC,eACRC,EAAQC,GAAab,mBAAS,IAarCG,oBAAU,KAXOC,WACf,MAAMC,cACEC,MAAK,qDAAApB,OAAsDZ,KACjE+B,OACFQ,EAAUR,EAAKE,KAAKE,OAEA,OAAhBJ,EAAKS,QACPC,QAAQC,IAAI,gBAKdC,IACC,CAAC3C,IACJ,MAAM4C,EAAOC,OAAOD,KAAKN,GAEzB,OADAG,QAAQC,IAAIE,GAEVtC,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAK+B,EAAOpC,OACZI,IAAAC,cAAA,SAAG,UAAQ+B,EAAOnC,QAClBG,IAAAC,cAAA,SAAG,SAAO+B,EAAOQ,YCZRC,MAXf,WACE,OACEzC,IAAAC,cAACyC,IAAM,CAACC,SAAUC,8BAChB5C,IAAAC,cAAC4C,IAAM,KACL7C,IAAAC,cAAC6C,IAAK,CAACC,KAAK,aAAaC,QAAShD,IAAAC,cAAC6B,EAAM,QACzC9B,IAAAC,cAAC6C,IAAK,CAACC,KAAK,IAAIC,QAAShD,IAAAC,cAACgB,EAAI,WCLzBgC,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHrD,IAAAC,cAACD,IAAMsD,WAAU,KACftD,IAAAC,cAACwC,EAAG","file":"static/js/main.1b32e4d6.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\n\nfunction Movie({ id, medium_cover_image, title, rating, genres, summary }) {\n  return (\n    <div>\n      <img src={medium_cover_image} alt={title} />\n      <h2>\n        <Link to={`/movie/${id}`}>\n          {title} / Rate:{rating}\n        </Link>\n      </h2>\n      <p>{summary}</p>\n      <div>\n        Genres :\n        <ul>\n          {genres.map((g, index) => (\n            <li key={`${g} - ${index}`}>{g}</li>\n          ))}\n        </ul>\n      </div>\n      <br />\n    </div>\n  );\n}\n\nMovie.prototypes = {\n  id: PropTypes.number.isRequired,\n  medium_cover_image: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  rating: PropTypes.string.isRequired,\n  summary: PropTypes.string.isRequired,\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default Movie;\n","import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport Movie from \"../components/Movie\";\n\nfunction Home() {\n  const [loading, setLoading] = useState(true);\n  const [movies, setMovies] = useState([]);\n  const getMovies = async () => {\n    const json = await (\n      await fetch(\n        \"https://yts.mx/api/v2/list_movies.json?minimum_rating=8.5&sort_by=year\"\n      )\n    ).json();\n\n    setMovies(json.data.movies);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    getMovies();\n  }, []);\n\n  return (\n    <div>\n      {loading ? (\n        <h1>Loading ...</h1>\n      ) : (\n        <div>\n          <h1>Movie Lists</h1>\n          {movies.map((movie) => (\n            <Movie\n              key={movie.id}\n              id={movie.id}\n              medium_cover_image={movie.medium_cover_image}\n              title={movie.title}\n              rating={movie.rating}\n              genres={movie.genres}\n              summary={movie.summary}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Home;\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nfunction Detail() {\n  const { id } = useParams();\n  const [detail, setDetail] = useState([]);\n\n  const getMovie = async () => {\n    const json = await (\n      await fetch(`https://yts.mx/api/v2/movie_details.json?movie_id=${id}`)\n    ).json();\n    setDetail(json.data.movie);\n\n    if (json.status !== \"ok\") {\n      console.log(\"not fetched\");\n    }\n  };\n\n  useEffect(() => {\n    getMovie();\n  }, [id]);\n  const keys = Object.keys(detail);\n  console.log(keys);\n  return (\n    <div>\n      <h1>{detail.title}</h1>\n      <p>Rates: {detail.rating}</p>\n      <p>lang: {detail.language}</p>\n    </div>\n  );\n}\nexport default Detail;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport Home from \"./routes/Home\";\nimport Detail from \"./routes/Detail\";\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Routes>\n        <Route path=\"/movie/:id\" element={<Detail />} />\n        <Route path=\"/\" element={<Home />} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}